#include <random>
#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>

const int kValueRange = 5000000;
const int kArraySize = 100000;

void print_vector(const std::vector<int>& v) {
    for (auto& i : v)
        std::cout << i << ' ';
    std::cout << '\n';
}

void shell_sort(std::vector<int>& v) {
    int n = v.size();
    int i, j, hCnt, h;
    int increments[20], k;
    // create an appropriate number of increments h
    for (h = 1, i = 0; h < n; i++) {
        increments[i] = h;
        h = 3*h + 1;
    }
    // loop on the number of different increments h
    for (i--; i >= 0; i--) {
        h = increments[i];
        // loop on the number of subarrays h-sorted in ith pass
        for (hCnt = h; hCnt < 2*h; hCnt++) {
            // insertion sort for subarray containing every hth element of
            for (j = hCnt; j < n; ) {   // array data
                int tmp = v[j];
                k = j;
                while (k-h >= 0 && tmp < v[k-h]) {
                    v[k] = v[k-h];
                    k -= h;
                }
                v[k] = tmp;
                j += h;
            }
        }
    }
}

int main()
{
    std::random_device rd;  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> dis(1, kValueRange);
 
    std::vector<int> v(kArraySize);
    for (auto& i : v) {
        //Use dis to transform the random unsigned int generated by gen into an int in [1, 1,000]
        i = dis(gen);
    }

    // print_vector(v);
    
    auto start = std::chrono::system_clock::now();
    shell_sort(v);
    auto end = std::chrono::system_clock::now();

    // print_vector(v);

    auto elapsed_seconds = end-start;
    std::cout << "elapsed time: " << elapsed_seconds.count() << "us\n";
}